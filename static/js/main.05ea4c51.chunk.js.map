{"version":3,"sources":["components/MapDraw.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","map","height","width","zIndex","buttonWrapper","position","bottom","spacing","marginLeft","marginBottom","transform","headerWrapper","marginTop","MapDraw","props","classes","editRef","useRef","useState","drawing","setDrawing","className","Map","center","zoom","zoomControl","TileLayer","attribution","url","FeatureGroup","ref","onCreated","e","layer","on","current","leafletElement","_toolbars","edit","_modes","handler","enable","bindTooltip","sticky","direction","draw","rectangle","circle","polyline","circlemarker","marker","polygon","allowIntersection","shapeOptions","color","Button","variant","onClick","completeShape","disable","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qVAYMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,IAAM,CACFC,OAAO,oBACPC,MAAO,MACPC,OAAQ,GAEZC,cAAe,CACXD,OAAQ,EACRE,SAAU,WACVC,OAAQP,EAAMQ,QAAQ,GACtBC,WAAY,MACZC,aAAc,KACdC,UAAW,oBAEfC,cAAe,CACXR,OAAQ,EACRK,WAAYT,EAAMQ,QAAQ,GAC1BK,UAAWb,EAAMQ,QAAQ,QAkJlBM,EA9IQ,SAACC,GAEpB,IAAMC,EAAUlB,EAAUiB,GACpBE,EAAUC,mBAHc,EAQAC,oBAAS,GART,mBAQvBC,EARuB,KAQdC,EARc,KAmF9B,OACI,6BACI,yBAAKC,UAAWN,EAAQJ,eACpB,wEAGJ,kBAACW,EAAA,EAAD,CACAC,OAAQ,CAAC,QAAS,KAClBC,KAAM,EACNC,aAAa,EACbJ,UAAWN,EAAQf,KAEf,kBAAC0B,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,4CAGR,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CACAC,IAAKd,EACLX,SAAS,WACT0B,UAxCK,SAACC,GAClBZ,GAAW,GAEXY,EAAEC,MAAMC,GAAG,SAAS,WAChBlB,EAAQmB,QAAQC,eAAeC,UAAUC,KAAKC,OAAOD,KAAKE,QAAQC,YAEtET,EAAEC,MAAMC,GAAG,eAAe,eAG1BF,EAAEC,MAAMS,YAAY,OAChB,CACErB,UAAW,gFACXsB,QAAQ,EACRC,UAAW,WA6BLC,KAAM,CACFC,WAAW,EACXC,QAAQ,EACRC,UAAU,EACVC,cAAc,EACdC,QAAQ,EACRC,QAAS,CACLC,mBAAmB,EACnBC,aAAc,CACVC,MAAO,iBAU3B,yBAAKjC,UAAWN,EAAQX,eACpB,kBAACmD,EAAA,EAAD,CACIC,QAAQ,YACRC,QAtHI,WAIXtC,GAGDH,EAAQmB,QAAQC,eAAeC,UAAUQ,KAAKN,OAAOY,QAAQX,QAAQkB,gBACrE1C,EAAQmB,QAAQC,eAAeC,UAAUQ,KAAKN,OAAOY,QAAQX,QAAQmB,WAHrE3C,EAAQmB,QAAQC,eAAeC,UAAUQ,KAAKN,OAAOY,QAAQX,QAAQC,SAKzErB,GAAYD,KAgHIA,EAAU,YAAc,iBC1JjCyC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05ea4c51.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\n\r\nimport { Map, FeatureGroup, TileLayer } from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\";\r\nimport L from \"leaflet\"\r\n\r\nimport \"./assets/leaflet.css\"\r\nimport \"./assets/leaflet.draw.css\"\r\n\r\n// Material components\r\nimport { makeStyles, Button } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    map: ({\r\n        height: `calc(90vh - 90px)`,\r\n        width: '60%',\r\n        zIndex: 0\r\n    }),\r\n    buttonWrapper: {\r\n        zIndex: 1,\r\n        position: \"absolute\",\r\n        bottom: theme.spacing(2),\r\n        marginLeft: \"30%\",\r\n        marginBottom: \"8%\",\r\n        transform: \"translateX(-50%)\",\r\n    },\r\n    headerWrapper: {\r\n        zIndex: 1,\r\n        marginLeft: theme.spacing(3),\r\n        marginTop: theme.spacing(1),\r\n    }\r\n}));\r\n\r\nexport const MapDraw = (props) => {\r\n\r\n    const classes = useStyles(props)\r\n    const editRef = useRef();\r\n\r\n    //use states to enable the button clicks at special times, also you can use states \r\n    //to perform multiple actions with one button\r\n\r\n    const [drawing, setDrawing] = useState(false);\r\n\r\n    const handleClick = () => {\r\n        \r\n        //Edit this method to perform other actions\r\n\r\n        if (!drawing) {\r\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\r\n        } else {\r\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\r\n            editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\r\n        }\r\n        setDrawing(!drawing)\r\n    }\r\n\r\n    //Overview of methods you can use to access the toolbars handler for polygon drawing\r\n\r\n        // startDraw\r\n        //editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.enable()\r\n\r\n        // cancelDraw \r\n        //editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\r\n\r\n        // vertexBack \r\n        //editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.deleteLastVertex()\r\n\r\n        // stopDraw \r\n        //editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.completeShape()\r\n        //editRef.current.leafletElement._toolbars.draw._modes.polygon.handler.disable()\r\n\r\n        // startEdit \r\n        //editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\r\n\r\n        // cancelEdit \r\n        //editRef.current.leafletElement._toolbars.edit._modes.edit.handler.disable()\r\n\r\n        // saveEdit\r\n        //editRef.current.leafletElement._toolbars.edit._modes.edit.handler.save() \r\n        //editRef.current.leafletElement._toolbars.edit._modes.edit.handler.disable()\r\n        \r\n        // startDelete \r\n        //editRef.current.leafletElement._toolbars.edit._modes.remove.handler.enable()\r\n\r\n        // saveDelete \r\n        //editRef.current.leafletElement._toolbars.edit._modes.remove.handler.save()\r\n        //editRef.current.leafletElement._toolbars.edit._modes.remove.handler.disable()\r\n\r\n    \r\n    //example methods from section 4\r\n\r\n    //uncomment next line to change the default tooltip text\r\n    //L.drawLocal.draw.handlers.polygon.tooltip.start = \"This is an modified tooltip text\"\r\n\r\n    //to delete handlers to avoid draw on right clicks implement onHandleMapReady function\r\n    //there you call layer.off('**name of the handler**')\r\n\r\n    const onShapeDrawn = (e) => {\r\n        setDrawing(false)\r\n\r\n        e.layer.on('click', () => {\r\n            editRef.current.leafletElement._toolbars.edit._modes.edit.handler.enable()\r\n        })\r\n        e.layer.on('contextmenu', () => {\r\n            //do some contextmenu action here\r\n        })\r\n        e.layer.bindTooltip(\"Text\", \r\n            {\r\n              className: 'leaflet-draw-tooltip:before leaflet-draw-tooltip leaflet-draw-tooltip-visible',\r\n              sticky: true,\r\n              direction: 'right'\r\n            }\r\n        );\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <div className={classes.headerWrapper}>\r\n                <h1> Custom button react-leaflet-draw Demo </h1>\r\n            </div>\r\n            \r\n            <Map \r\n            center={[51.515, -0.09]} \r\n            zoom={8}\r\n            zoomControl={true}  \r\n            className={classes.map} >\r\n\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                <FeatureGroup >\r\n                    <EditControl\r\n                    ref={editRef}\r\n                    position='topright'\r\n                    onCreated={onShapeDrawn}\r\n                    //here you can specify your shape options and which handler you want to enable\r\n                    draw={{\r\n                        rectangle: false,\r\n                        circle: false,\r\n                        polyline: false,\r\n                        circlemarker: false,\r\n                        marker: false,\r\n                        polygon: {\r\n                            allowIntersection: false,\r\n                            shapeOptions: {\r\n                                color: \"#ff0000\"\r\n                            },\r\n                        }\r\n                    }}\r\n                    />\r\n                </FeatureGroup>\r\n                \r\n                \r\n            </Map>\r\n\r\n            <div className={classes.buttonWrapper}>\r\n                <Button \r\n                    variant=\"contained\"\r\n                    onClick={handleClick}>\r\n                    \r\n                    {\r\n                        //display the correct text regarding the state\r\n                        drawing ? \"Save draw\" : \"Start draw\" \r\n                    \r\n                    }\r\n                </Button>\r\n            </div>\r\n            \r\n        </div>\r\n            \r\n    )};\r\n\r\nexport default MapDraw;\r\n","import React from 'react';\nimport MapDraw from './components';\n\nfunction App() {\n  return (\n    <div>\n      <MapDraw/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}